/**
 * Contains common message definitions.
 */
syntax = "proto3";

package anymal_api_proto;

/**
 * Representation of a time point as Unix time stamp.
 */
message Timestamp {
  uint64 value = 1;  // Timestamp as nanoseconds since Unix epoch.
}

/**
 * Structure to represent a range of values. Supports all range variants, including or excluding min or max: [], (], [), ()
 */
message FloatRange {
  float min = 1;           // Lower bound of the range.
  float max = 2;           // Upper bound of the range.
  bool exclusive_min = 3;  // True, if the range excludes the lower bound.
  bool exclusive_max = 4;  // True, if the range excludes the upper bound.
}

/**
 * Image recorded by one of ANYmal's cameras.
 */
message Image {
  int32 width = 1;   // Width of the image in pixels.
  int32 height = 2;  // Height of the image in pixels.
  string encoding =
      3;  // Encoding identifier (e.g. channel meaning, ordering, etc.).
          // If the image is compressed, this field additionally contains the compression type e.g. for JPEG compression -> bgr8,jpeg.
          // The data is then just the compressed image data and needs to to be decoded before usage e.g. with OpenCV cv::imdecode().
  int32 step = 4;  // Step defined by the data size and the image height. It is redundant information useful for sanity checks.
  bytes data = 5;  // Array of bytes that stores the actual image data.
}

/**
 * Thermal image recorded by ANYmal's thermal camera.
 */
message ThermalImage {
  Image image =
      1;  // Thermal image with raw values. Convert it to temperature values using the following formula: temp = gain * raw_value + offset
  double gain = 2;    // Gain for temperature conversion.
  double offset = 3;  // Offset for temperature conversion.
}

/**
 * Acoustic image recorded by ANYmal's acoustic camera.
 */
message AcousticImage {
  Image image = 1;                 // Image.
  FloatRange frequency_range = 2;  // Frequency range configured for the acoustic image.
}

/**
 * Audio recording.
 */
message AudioData {
  int32 sampling_rate = 1;  // Sampling rate in Hz.
  int32 channels = 2;       // Number of channels.
  int32 depth = 3;          // Number of bits per sample.
  bytes data = 4;           // Array of bytes that stores the actual audio data.
  float duration = 5;       // duration of the recording in seconds
}

/**
 * Metadata of a single robot.
 */
message RobotMetaData {
  string robot_name = 1;  // Name of the robot.
}

// @exclude TODO(jvelasco): deprecate and replace to AnymalServiceCallStatus
/**
 * Common result codes of a response to a service request, provided by the server.
 * This information is needed to assess if a request has been successfully forwarded to the robot (if it needs to be).
 * This message will be deprecated in favor of AnymalServiceCallStatus in the future.
 */
enum ServiceCallStatus {
  SCS_OK = 0;              // Request successful.
  SCS_ANYMAL_UNKNOWN = 1;  // ANYmal with the name given in the request is unknown.
  SCS_ANYMAL_OFFLINE = 2;  // ANYmal with the name given in the request (or its agent that provides the service) is currently offline.
  SCS_ERROR_UNKNOWN = 3;   // Unknown error.
  SCS_PARSING_ERROR = 4;   // Error while parsing the request.
}

/**
 * Common audio/video codec parameters.
 */
message AudioVideoParameters {
  uint32 bit_rate = 1;  // Bit rate in bits per second.
  string encoding = 2;  // Encoding used for the data.
  string format = 3;    // Pixel format for videos, sample format for audio.
}

/**
 * ANYmal software version details.
 */
message Version {
  string version = 1;      // Release version of the software.
  string git_version = 2;  // git revision of the software.
}
/**
 * Unique identifier.
 */
message Uid {
  option deprecated = true;
  string value = 1;  // Value of the unique identifier.
}

/**
 * Common result codes of a response to a service request, which needs to be forwarded to ANYmal.
 * This status is generated by the server and is needed to assess if the server was able to successfully forwarded the request to the robot.
 */
enum AnymalServiceCallStatus {
  ASCS_UNDEFINED = 0;             // Status is undefined.
  ASCS_OK = 1;                    // Request successful.
  ASCS_ERROR_ANYMAL_UNKNOWN = 2;  // ANYmal with the given name is not known to the server.
  ASCS_ERROR_ANYMAL_OFFLINE = 3;  // ANYmal is known, but currently offline.
  ASCS_ERROR_PERMISSION = 4;      // ANYmal is online, but the client does not have permission to execute the command.
  ASCS_ERROR_UNKNOWN = 5;         // ANYmal is online, but an unknown error happened.
}

/**
 * Common response header of a service request, which needs to be forwarded to ANYmal.
 */
message AnymalServiceResponseHeader {
  Timestamp timestamp = 1;                          // Timestamp when the request was processed.
  AnymalServiceCallStatus service_call_status = 2;  // Service call status.
  string message = 3;                               // (optional) Human-readable description of the status.
}

/**
 * Common result codes of a service request to the server, which does not need to be forwarded to ANYmal, in contrast to
 * AnymalServiceCallStatus.
 */
enum DataServerServiceCallStatus {
  DSSCS_UNDEFINED = 0;  // Undefined status.
  DSSCS_OK = 1;         // Request successful.
  DSSCS_ERROR = 2;      // Request failed due to an error.
}

/**
 * Common response header of a service request to the server, which does not need to be forwarded to ANYmal.
 */
message DataServerServiceResponseHeader {
  Timestamp timestamp = 1;                              // Timestamp when the request was processed.
  DataServerServiceCallStatus service_call_status = 2;  // Service call status.
  string message = 3;                                   // (optional) Human-readable description of the status.
}

/**
 * Use to represent the dynamics of a measured value. Expect this to be extended in the future with more information,
 * e.g. the first derivative or expected duration until critical.
 */
message MeasurementDynamics {
  float measurement = 1;
}

// @exclude Note for developers: Must match pdb_msgs/BatteryState.msg.
/**
 * Status information of the robot's battery.
 */
enum BatteryStatus {
  BS_UNKNOWN = 0;            // Unknown status
  BS_CHARGING = 1;           // The battery is currently being charged.
  BS_DISCHARGING = 2;        // The battery is currently discharging.
  BS_NOT_CONNECTED = 3;      // No battery is currently connected to the robot, or there is a connection problem.
  BS_ERROR = 4;              // The battery is currently in error state.
  BS_PERMANENT_FAILURE = 5;  // The battery is in a permanent failure state and needs to be replaced.
}

/**
 * Describes the state of the battery.
 */
message BatteryState {
  MeasurementDynamics state_of_charge = 1;  // Charge of the battery [0-1].
  MeasurementDynamics voltage = 2;          // Voltage of the battery [V].
  BatteryStatus status = 3;                 // Status of the battery.
}

/**
 * Contains information about the environmental state of the main body of the robot.
 */
message MainBodyState {
  MeasurementDynamics relative_humidity = 1;      // Relative humidity inside the main body [0-1].
  MeasurementDynamics differential_pressure = 2;  // Differential pressure of the main body compared to the environment [mbar].
  MeasurementDynamics temperature = 3;            // Temperature inside the main body [degree C].
}

/**
 * Contains a discretization of substance concentration level, based on threshold values.
 */
enum SubstanceConcentrationLevel {
  SCL_NA = 0;                       // The substance concentration was not interpreted
  SCL_NOT_ENOUGH_MEASUREMENTS = 1;  // There were not enough measurements to be able to provide a concentration level interpretation
  SCL_NORMAL = 2;                   // The substance concentration is within the normal range.
  SCL_LOW_ALARM = 3;     // The substance concentration is below the `low_concentration_thresholds/alarm` in the robot configuration.
  SCL_LOW_WARNING = 4;   // The substance concentration is below the `low_concentration_thresholds/warning` in the robot configuration.
  SCL_HIGH_WARNING = 5;  // The substance concentration is above the `high_concentration_thresholds/warning` in the robot configuration.
  SCL_HIGH_ALARM = 6;    // The substance concentration is above the `high_concentration_thresholds/alarm` in the robot configuration.
}

/**
 * Contains a discretization of confidence level of a measurement interpretation, based on threshold values.
 */
enum InterpretationConfidenceLevel {
  ICL_NA = 0;    // The confidence level wasn't calculated
  ICL_LOW = 1;   // The confidence level is below the threshold (Default= 0.75), the interpretation may be uncertain.
  ICL_HIGH = 2;  // The confidence level is above the threshold for its interpretation to be considered certain.
}