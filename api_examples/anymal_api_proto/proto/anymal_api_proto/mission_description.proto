/**
 * Contains messages that define a mission description.
 */
syntax = "proto3";

package anymal_api_proto;

import "anymal_api_proto/common.proto";
import "anymal_api_proto/task.proto";

/**
 * Description of a mission predefined in the environment currently loaded on the robot.
 */
message PredefinedMissionDescription {
  Uid mission_description_uid = 1 [deprecated = true];  // Deprecated by mission uid
  Uid initial_task_uid = 2 [deprecated = true];         // Deptrecated by starting_task_uid
  string mission_uid = 3;        // Unique identifier of the mission description. This is equivalent to the Name field of the object
  string starting_task_uid = 4;  // (optional) Unique identifier or name of the task start with. Setting it overwrites the initial task
                                 // predefined in the mission description.
}

/**
 * Lightweight metadata of a mission.
 * Used to e.g. query the list of available predefined missions.
 */
message MissionDescriptionMetadata {
  Uid uid = 1 [deprecated = true];  // Deprecated by mission_uid
  string label = 2;                 // Operator-defined, human readable label of the mission. Must be unique within a single environment.
  string mission_uid = 3;           // Uid of the mission description. Automatically generated by the backend, the client does not need
                                    // to set it when creating a mission description.
}

/**
 * Fully defined mission description.
 * Used for:
 * - executing ad-hoc missions.
 * - creating new missions in the environment.
 * - editing existing missions in the environment.
 * - querying a mission description from the environment.
 */
message MissionDescription {
  MissionDescriptionMetadata metadata = 1;  // Metadata.
  string description = 2;                   // (optional) Operator-defined, human readable description the purpose of the mission.
  repeated AnyTaskDescription task_descriptions =
      3;  // List of descriptions of all tasks. If transitions are not set, the tasks are executed sequentially.
  Uid initial_task_uid = 4 [deprecated = true];  // (optional) Unique identifier of the task to start with. If not set, the initial task is
                                                 // the first task in the list of task descriptions.
  repeated TaskTransition transitions = 5;       // (optional) Transitions between tasks. If not set, the tasks are executed sequentially.
  string starting_task_uid =
      6;  // (optional) Unique identifier of the task to start with. If not set, the initial task is the first task in
  // the list of task descriptions.
}

/**

 * Container storing a mission description of any type.
 */
message AnyMissionDescription {
  oneof mission_description {
    PredefinedMissionDescription predefined = 1;
    MissionDescription ad_hoc = 2;
  }
}

// @exclude TODO: The following uml does not render correctly in the documentation -> remove?
/**
 * Types of mission statuses.
 * The following UML code represents the state machine explaining how mission events (ME) affect the mission status (MS).
 * Mission events are not part of the ANYmal API to avoid transmitting redundant information.
 * @startuml
 * [*] --> MS_RUNNING : ME_STARTED
 * MS_RUNNING --> MS_RUNNING : ME_PROGRESSED
 * MS_RUNNING --> MS_PAUSED : ME_PAUSED
 * MS_PAUSED --> MS_RUNNING : ME_RESUMED
 * MS_RUNNING --> MS_COMPLETED : ME_ENDED
 * MS_PAUSED --> MS_RUNNING : ME_STARTED
 * MS_COMPLETED --> MS_RUNNING : ME_STARTED
 * @enduml
 */
enum MissionStatus {
  MS_NA = 0;         // Mission status is not available.
  MS_RUNNING = 1;    // Mission is currently being executed.
  MS_PAUSED = 2;     // Mission is paused.
  MS_COMPLETED = 3;  // Mission has been executed.
}

/**
 * Mission metadata.
 * Data that does not change between two subsequent mission events (e.g. same robot, mission id).
 */
message MissionMetaData {
  string robot_name = 1;         // Name of the robot.
  string mission_id = 2;         // Unique identifier of the mission configuration. This id persists over multiple runs of the same mission.
  string mission_run_id = 3;     // Unique identifier for the currently executed mission. A new id is generated for every mission run.
  MissionType mission_type = 4;  // Type of mission (predefined or an ad-hoc)
}

/**
 * Summary of a mission.
 * Can be the summary of a past mission, or the expected summary of an ongoing or future mission.
 */
message MissionSummary {
  MissionStatus status = 1;  // Current mission status.
  repeated TaskSummary task_summaries =
      2;                // Summaries of the tasks within the mission, ordered chronologically. Contains past, running, and future tasks.
  Outcome outcome = 3;  // Outcome of the mission.
}

/**
 * This message will be deprecated in favor of AnyMissionDescription in the future.
 *
 * Definition of a basic mission.
 */
message MissionPlan {
  repeated MissionTask tasks = 1;
}

/**
 * Types of missions.
 */
enum MissionType {
  MT_PREDEFINED = 0;  // Predefined mission stored on ANYmal.
  MT_AD_HOC = 1;      // Ad-hoc mission defined by the client.
}
