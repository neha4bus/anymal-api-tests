/**
 * Messages that define task descriptions.
 */
syntax = "proto3";

package anymal_api_proto;

import "anymal_api_proto/navigation.proto";
import "anymal_api_proto/spatial.proto";

/**
 * Task or mission execution outcome.
 */
enum Outcome {
  OC_NA = 0;       // Task or mission outcome is not available.
  OC_SUCCESS = 1;  // Task or mission is successful.
  OC_FAILURE = 2;  // Task or mission has failed.
  OC_NORMAL = 3;   // Inspection: Task has succeeded, reading was normal.
  OC_ANOMALY = 4;  // Inspection: Task has succeeded, reading indicates an anomaly.
}

/**
 * Task result interpretation.
 */
enum ResultInterpretation {
  RI_NA = 0;            // Task result interpretation is not available or not applicable.
  RI_NORMAL = 1;        // Inspection: Task has succeeded, reading was normal.
  RI_ANOMALY = 2;       // Inspection: Task has succeeded, reading indicates an anomaly.
  RI_NOT_DETECTED = 3;  // Inspection: POI was not detected, cannot obtain a reading.
  RI_NOT_ACCURATE = 4;  // Inspection: Task has succeeded, but reading was not sufficently accurate.
}

/**
 * Type of the source defining a task.
 */
enum TaskSourceType {
  TST_UNDEFINED = 0;               // Best practice: 0 must be UNDEFINED.
  TST_PREDEFINED_SOFTWARE = 1;     // Task and its parameters are predefined in the robot's software.
  TST_PREDEFINED_ENVIRONMENT = 2;  // Task and its parameters are predefined by the operator in the loaded environment.
  TST_AD_HOC = 3;  // Task and its parameters are not predefined but ad-hoc. Just for completeness, currently no use case foreseen.
}

/**
 * Attributes common to all task descriptions.
 */
message GenericTaskDescriptionAttributes {
  string uid = 1;    // (optional) Unique identifier of the task. Used to store it and success statistics in a database. Automatically
                     // generated by the backend, the client does not need to set it when creating an task.
  string label = 2;  // (optional) Operator-defined, human readable label of the task. If not set, the backend suggests a label.
  TaskSourceType source_type = 3;  // (optional) Type of the source of the task. Set when the task data comes from the backend, e.g. when
                                   // requesting all possible tasks. Used to e.g. highlight tasks depending on their source.
}

/**
 * Type of path planning to use for navigation.
 */
enum PathPlanningType {
  PPT_UNDEFINED = 0;        // Best practice: 0 must be UNDEFINED.
  PPT_ALONG_WAYPOINTS = 1;  // Plan path along waypoints.
  PPT_DIRECT = 2;           // Plan path directly to goal.
}

/**
 * Description of a navigation task.
 */
message NavigationTaskDescription {
  // Specific attributes.
  AnyNavigationGoal navigation_goal = 1;    // Goal to navigate to.
  PathPlanningType path_planning_type = 2;  // Type of path planning to use.
}

/**
 * Description of a Point of Interest.
 */
message POI {
  Pose pose = 1;
  // II Options etc...
}

/**
 * A Point of Interest (POI) either represented by its UID or its full description.
 */
message AnyPOI {
  oneof poi {
    string uid = 1;       // Predefined POI UID representation
    POI description = 2;  // Detailed POI representation.
  }
}

/**
 * Description of a docking task.
 */
message DockingTaskDescription {
  // Specific attributes.
  string docking_station = 1;  // Target docking station to dock to.
}

/**
 * Description of a image capture task.
 * Currently only supports predefined POIs.
 */
message ImageTaskDescription {
  AnyPOI poi = 1;                         // POI to record an image of.
  AnyNavigationGoal navigation_goal = 2;  // (optional) If not set, the robot will navigate to the zone configured in the environment.
}

/**
 * Description of a thermal image capture task.
 * Currently only supports predefined POIs.
 */
message ThermalImageTaskDescription {
  AnyPOI poi = 1;                         // POI to record a thermal image of.
  AnyNavigationGoal navigation_goal = 2;  // (optional) If not set, the robot will navigate to the zone configured in the environment.
}

/**
 * Description of an acoustic image capture task.
 * Currently only supports predefined POIs.
 */
message AcousticImageTaskDescription {
  AnyPOI poi = 1;                         // POI to record an acoustic image of.
  AnyNavigationGoal navigation_goal = 2;  // (optional) If not set, the robot will navigate to the zone configured in the environment.
}

/**
 * Description of an audio recording task.
 * Currently only supports predefined POIs.
 */
message AudioRecordingTaskDescription {
  AnyPOI poi = 1;                         // POI to record audio of.
  AnyNavigationGoal navigation_goal = 2;  // (optional) If not set, the robot will navigate to the zone configured in the environment.
}

/**
 * Description of a video recording task.
 * Currently only supports predefined POIs.
 */
message VideoRecordingTaskDescription {
  AnyPOI poi = 1;                         // POI to record video of.
  AnyNavigationGoal navigation_goal = 2;  // (optional) If not set, the robot will navigate to the zone configured in the environment.
}

/**
 * Description of a thermal recording task.
 * Currently only supports predefined POIs.
 */
message ThermalRecordingTaskDescription {
  AnyPOI poi = 1;                         // POI to record thermal video of.
  AnyNavigationGoal navigation_goal = 2;  // (optional) If not set, the robot will navigate to the zone configured in the environment.
}

/**
 * Description of a gauge assessment task.
 * Currently only supports predefined POIs.
 */
message GaugeAssessmentTaskDescription {
  AnyPOI poi = 1;                         // POI to assess.
  AnyNavigationGoal navigation_goal = 2;  // (optional) If not set, the robot will navigate to the zone configured in the environment.
}

/**
 * Description of a counter assessment task.
 * Currently only supports predefined POIs.
 */
message CounterAssessmentTaskDescription {
  AnyPOI poi = 1;                         // POI to assess.
  AnyNavigationGoal navigation_goal = 2;  // (optional) If not set, the robot will navigate to the zone configured in the environment.
}

/**
 * Description of a frequency assessment task.
 * Currently only supports predefined POIs.
 */
message FrequencyAssessmentTaskDescription {
  AnyPOI poi = 1;                         // POI to assess.
  AnyNavigationGoal navigation_goal = 2;  // (optional) If not set, the robot will navigate to the zone configured in the environment.
}

/**
 * Description of a thermal assessment task.
 * Currently only supports predefined POIs.
 */
message ThermalAssessmentTaskDescription {
  AnyPOI poi = 1;                         // POI to assess.
  AnyNavigationGoal navigation_goal = 2;  // (optional) If not set, the robot will navigate to the zone configured in the environment.
}

/**
 * Description of a lever valve assessment task.
 * Currently only supports predefined POIs.
 */
message LeverValveAssessmentTaskDescription {
  AnyPOI poi = 1;                         // POI to assess.
  AnyNavigationGoal navigation_goal = 2;  // (optional) If not set, the robot will navigate to the zone configured in the environment.
}

/**
 * Gas sensor number to use for concentration assessment.
 */
enum GasConcentrationSensorNumber {
  GCSN_UNDEFINED = 0;  // Best practice: 0 must be UNDEFINED.
  GCSN_1 = 1;          // Sensor number 1.
  GCSN_2 = 2;          // Sensor number 2.
}

/**
 * Description of a concentration assessment task.
 * Currently only supports predefined navigation goals.
 */
message ConcentrationAssessmentTaskDescription {
  AnyNavigationGoal navigation_goal = 1;           // Navigation goal to assess from
  GasConcentrationSensorNumber sensor_number = 2;  // Sensor number to assess
}

/**
 * Description of a leak assessment task.
 * Currently only supports predefined POIs.
 */
message LeakAssessmentTaskDescription {
  AnyPOI poi = 1;                         // POI to assess.
  AnyNavigationGoal navigation_goal = 2;  // (optional) If not set, the robot will navigate to the zone configured in the environment.
}

/**
 * Description of a partial discharge assessment task.
 * Currently only supports predefined POIs.
 */
message PartialDischargeAssessmentTaskDescription {
  AnyPOI poi = 1;                         // POI to assess.
  AnyNavigationGoal navigation_goal = 2;  // (optional) If not set, the robot will navigate to the zone configured in the environment.
}

/**
 * Description of a mechanical inspection task.
 * Currently only supports predefined POIs.
 */
message MechanicalInspectionTaskDescription {
  AnyPOI poi = 1;                         // POI to inspect.
  AnyNavigationGoal navigation_goal = 2;  // (optional) If not set, the robot will navigate to the zone configured in the environment.
}

message OperationalModeSwitchingTaskDescription {
  OperationalMode operational_mode = 1;  // Target operational mode to switch to.
  string poi_uid = 2;  // (Optional) Unique identifier of the poi to dock at, only required if the operational mode is OM_DOCK.
}

message ObjectDetectionTaskDescription {
  AnyPOI poi = 1;                         // POI to detect an object.
  AnyNavigationGoal navigation_goal = 2;  // (optional) If not set, the robot will navigate to the zone configured in the environment.
}

message ResetInspectionPayloadTaskDescription {}

message WaitTaskDescription {
  float duration = 1;  // Duration to wait in seconds.
}

message CountTaskDescription {
  // Note that a count task is meant to implement (counted) loops.
  // The OC_SUCCESS outcome of this task defines what happens when the amount of num_cycles is reached
  // The OC_FAILURE outcome of this task defines what happens when the amount of num_cycles is not yet reached
  int32 num_cycles = 1;  // Number of cycles to count.
}

message BatteryLevelCheckTaskDescription {
  // The OC_SUCCESS outcome of this task defines what happens when the battery is above min_battery_level
  // The OC_FAILURE outcome of this task defines what happens when the battery is below min_battery_level
  float min_battery_level =
      1;  // (optional) Between 0 and 1. If not set, the robot will check if the battery level is low (based on the systems default).
}

/**
 * Fully defined task description.
 * Used to inform the client about details of predefined task, or for the client to create ad-hoc tasks.
 */
message TaskDescription {
  GenericTaskDescriptionAttributes generic = 1;  // Generic attributes.

  oneof specific {                             // Specific (~= extended type).
    NavigationTaskDescription navigation = 2;  // Navigation task.
    DockingTaskDescription dock = 3;           // Docking task. Experimental, not implemented yet. Do not use directly.
    OperationalModeSwitchingTaskDescription operational_mode_switching = 4;  // Operational mode switching.

    // Recording.
    ImageTaskDescription image = 5;
    ThermalImageTaskDescription thermal_image = 6;
    AcousticImageTaskDescription acoustic_image = 7;
    AudioRecordingTaskDescription audio_recording = 8;
    VideoRecordingTaskDescription video_recording = 9;
    ThermalRecordingTaskDescription thermal_recording = 10;

    // Assessment.
    GaugeAssessmentTaskDescription gauge_assessment = 11;
    CounterAssessmentTaskDescription counter_assessment = 12;
    FrequencyAssessmentTaskDescription frequency_assessment = 13;
    ThermalAssessmentTaskDescription thermal_assessment = 14;
    LeverValveAssessmentTaskDescription lever_valve_assessment = 15;
    ConcentrationAssessmentTaskDescription concentration_assessment = 16;
    LeakAssessmentTaskDescription leak_assessment = 17;
    PartialDischargeAssessmentTaskDescription partial_discharge_assessment = 18;
    ObjectDetectionTaskDescription object_detection = 19;

    // Monitoring.
    // FrequencyMonitoringTaskDescription frequency_monitoring = xx; // Currently not supported

    ResetInspectionPayloadTaskDescription reset_inspection_payload = 20;
    WaitTaskDescription wait = 21;
    CountTaskDescription count = 22;
    BatteryLevelCheckTaskDescription battery_level_check = 23;
    MechanicalInspectionTaskDescription mechanical_inspection_assessment = 24;
  }
}

/**
 * Container storing a task description of any type.
 */
message AnyTaskDescription {
  oneof task_description {
    string uid = 1;  // Currently not supported for mission creation
    TaskDescription description = 2;
  }
}

/**
 * Transition between two tasks.
 * Read as follows:
 * If task with identifier <completed_task_uid> is completed with outcome <completed_task_outcome>, the next task to execute is the task
 * with identifier <upcoming_task_uid>.
 */
message TaskTransition {
  string completed_task_uid = 1;       // Unique identifier of the completed task.
  Outcome completed_task_outcome = 2;  // (optional) Outcome of the completed task. If not set, any outcome will lead to the next task.
  string upcoming_task_uid = 3;        // Unique identifier of the upcoming task to execute.
}

/**
 * Types of task statuses.
 */
enum TaskStatus {
  TS_NA = 0;         // Task status is not available.
  TS_UPCOMING = 1;   // Task has not been started yet.
  TS_ONGOING = 2;    // Task is currently being executed.
  TS_PREEMPTED = 3;  // Task has been preempted while it was being executed, for example, because the mission was paused.
  TS_COMPLETED = 4;  // Task has been executed.
}

/**
 * Progress of a task.
 * Interpretation: {progress}/{target} {unit}
 * Example for a navigation task: 3.5/4.1 m
 * If the target is 1 and the unit is empty, it can be interpreted as percentage.
 */
message TaskProgress {
  float progress = 1;  // Current progress value.
  float target = 2;    // Target progress value.
  string unit = 3;     // Unit of the current and target progress.
}

/**
 * Summary of a task.
 * Can be the summary of a past task, or the expected summary of an ongoing or future task.
 */
message TaskSummary {
  string task_id = 1;                              // Identifier of the task, unique within a mission.
  TaskStatus status = 2;                           // Current task status.
  TaskProgress progress = 3;                       // Progress of the task.
  Outcome outcome = 4;                             // Outcome of the task.
  ResultInterpretation result_interpretation = 5;  // (optional) Result interpretation of the completed task when applicable.
  string task_run_uid = 6;                         // Unique identifier of the task run
  // In the future, this is the location to add e.g. duration, battery consumption, travelled path, etc.
}

/**
 * Define an inspection task.
 * Deprecated at 25.06. Obsoleted at 25.12.
 */
message MissionTaskInspection {
  string asset_id = 1;
  // InspectionMeasurementType inspection_types = 2;        // currently POIs only have an inspection type assigned
  // repeated InspectionInterpretationType interpretation_types = 3; // currently POIs have an interpretation type assigned
}

/**
 * Operational modes available during missions.
 * Deprecated at 25.06. Obsoleted at 25.12.
 */
enum OperationalMode {
  OM_UNDEFINED = 0;  // no operational mode provided
  OM_DOCK = 1;       // switch to dock operational mode.
  OM_SLEEP = 2;
  OM_REST = 3;
  OM_STAND = 4;
  OM_WALK = 5;
}

/**
 * Define an operational mode task.
 * Deprecated at 25.06. Obsoleted at 25.12.
 */
message MissionTaskOperationalMode {
  OperationalMode operational_mode = 1;
}

/**
 * Definition of a task for a mission
 * Deprecated at 25.06. Obsoleted at 25.12.
 */
message MissionTask {
  string task_id = 1;  // ID of the task being executed.
  oneof mission_task_oneof {
    MissionTaskInspection inspection_task = 2;        // Inspection task to execute
    MissionTaskOperationalMode operational_mode = 3;  // Switch operational mode
  }
}
