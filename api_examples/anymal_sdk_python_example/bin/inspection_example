#!/opt/ros/noetic/share/anymal_sdk_python39_environment/venv/bin/python

import time

from anymal_sdk_example import parse_cli_arguments, ANYmalExampleHandler


def main():
    # Parse command line arguments.
    args = parse_cli_arguments()

    print("Running inspection example.")
    anymal_name = input("Name of your ANYmal: ")
    test_api = ANYmalExampleHandler("anymal-connection-test", anymal_name, args)

    test_api.create_communication_interface()

    # Get user input.
    user_choice = input(
        "Would you like to\n"
        "1. Listen to inspection events\n"
        "2. Set LED intensity\n"
        "3. Set zoom level\n"
        "4. Set pan/tilt angles\n"
        "5. Set zoom rectangle\n"
        "6. Set acoustic imaging stream frequencies\n"
        "7. Set acoustic imaging sensitivity level\n"
        "[1-6]? "
    )
    if user_choice not in ["1", "2", "3", "4", "5", "6"]:
        print(f"Invalid choice: {user_choice}. Use 1 to 6.")
        return
    if user_choice == "1":
        try:
            test_api.register_inspection_callbacks()
            # Wait until we receive Ctrl+C to terminate.
            while True:
                time.sleep(2)
                test_api.fetch_inspection_data()
        except KeyboardInterrupt:
            test_api.close_communication_interface()
            test_api.close_session()
            return
    else:
        # Lease control to control the inspection payload.
        if not test_api.take_control():
            return
        if user_choice == "2":
            # Set the LED intensity.
            led_intensity = float(input("LED intensity [0.0-1.0]: "))
            test_api.set_led_intensity(led_intensity)
        elif user_choice == "3":
            # Set the zoom level.
            zoom_level = float(input("Zoom level [0.0-1.0]: "))
            test_api.set_zoom_level(zoom_level)
        elif user_choice == "4":
            # Set the pan/tilt angles.
            pan_angle = float(input("Pan angle [deg]: "))
            tilt_angle = float(input("Tilt angle [deg]: "))
            test_api.set_pan_tilt_position(pan_angle, tilt_angle)
        elif user_choice == "5":
            # Set the zoom rectangle.
            x = int(input("Rectangle x: "))
            y = int(input("Rectangle y: "))
            width = int(input("Rectangle width: "))
            height = int(input("Rectangle height: "))
            image_width = int(input("Image width: "))
            image_height = int(input("Image height: "))
            test_api.set_zoom_rectangle(x, y, width, height, image_width, image_height)
        elif user_choice == "6":
            # Set the acoustic imaging stream frequencies.
            min_frequency = int(input("Min frequency [Hz]: "))
            max_frequency = int(input("Max frequency [Hz]: "))
            test_api.set_acoustic_imaging_stream_frequencies(min_frequency, max_frequency)
        elif user_choice == "7":
            # Set the acoustic imaging sensitivity level
            sensitivity_level = int(input("Sensitivity level [1=Low, 2=Medium, 3=High, 4=Unset]: "))
            if sensitivity_level not in [1, 2, 3, 4]:
                print(f"Invalid sensitivity level: {sensitivity_level}. Use 1, 2, 3 or 4.")
                return
            test_api.set_acoustic_imaging_stream_sensitivity(sensitivity_level)
        # Release control.
        test_api.release_control()

    test_api.close_communication_interface()
    test_api.close_session()


if __name__ == "__main__":
    main()
